Capítulo 03. Control de flujo

¿Cuál es la diferencia entre una expresión, una proposición y una declaración?

3.1 Proposiciones y bloques
	Una expresión (p.ej., x = 0 ó i++) se convierte en una proposición cuando va seguida de un punto y coma.
	Por ejemplo, x = 0; o i++; o printf("hola");

3.2 If-else
	if (expresión)
	// si la expresión tiene valor diferente a cero es verdadera y se ejecuta proposición 1
	{
		proposición1 //no olvidar poner la coma
	}
	else
	 // si la expresión tiene valor igual a cero, es falsa y se ejecuta proposición 2
	{
		proposición2 //no olvidar poner la coma
	}

3.3 Else-if
	if (expresión)
	{
		proposición
	}
	else if (expresión)
	{
		proposición
	}
	else
	{
		proposición
	}

3.4 Switch
	switch (expresión)
	{
		case exp-const: proposiciones
		case exp-const: proposiciones
		default: proposiciones
	}

	break provoca una salida inmediata del switch.
	return también es una forma válida para salir del switch.

	ejemplo:
	switch(c) {
		case '0': case '1': case '2': case '3': case '4':
			n++;
			break;
		default: nother++; break;
	}

3.5 Ciclos---while y for
	while (expresión)
	{
		proposición
	}

	for (expr1: expr2: expr3)
	{
		proposición
	}

	es equivalente a

	expr1;
	while ( expr2 )
	{
		proposición
		expr3;
	}

3.6 Ciclos---do-while
	do
	{
		proposición
	}
	while (expresión);

3.7 Break y continue
	break sale del ciclo o del switch más interno.

	continue hace que se ejecute el siguiente ciclo.
	Por ejemplo:
		for ( i = 0; i < n; i++ )
		{
			if ( a[i] < 0 ) //ignora elementos negativos//
				continue; // el siguiente ciclo se ejecuta con i++
			// en el siguiente ciclo realizará la misma comprobación//
		}
	La proposición continue se emplea a menudo cuando la parte del ciclo que sigue es complicada.

3.8 Goto y etiquetas
	for (...)
	{
		goto error;
	}

	error: arregla el desorden
