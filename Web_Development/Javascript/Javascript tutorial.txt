JavaScript tutorial
-------------------

Table of Contents
 1. Introduction and basic concepts
 2. Datatypes, variables and operators
    2.1 Object-Oriented Programming
    2.2 The Number Object
    2.3 The Boolean Object
    2.4 The Strings Object
    2.5 The Arrays Object
    2.6 The Date Object
    2.7 The Math Object
    2.8 Regular Expressions
 3. Control flow: if, switch, for, while, break, continue, labels
 4. Functions
 5. Events
 6. Cookies
 7. Dialog boxes, page redirections, page refresh
 8. DOM
 9. Exceptions
10. Form validation
11. Animation
12. Multimedia
13. Debugging
14. Image Map
15. Browser compatibility
Extra. Void keyword and page printing

____________________________________

1. Introduction and basic concepts
JavaScript is a dynamic computer programming language.
It is lightweight and most commonly used as a part of web pages, whose implementations allow client-side script to interact with the user and make dynamic pages.
It is an interpreted programming language with object-oriented capabilities.
It was generated by Java by Netscape in 1995.

Netscape originally defined JavaScript in ECMA-262 Specification (see [1]) and, today the current spec is JavaScript 2.0 (see [2]).
[1] http://www.ecma-international.org/publications/index.html
[2] http://www.ecmascript.org/

Some applications:
    * Dynamic HTML.
    * Client-side mechanism provides many advantages over traditional CGI server-side scripts.
    * Check if the user has entered a valid e-mail address in a form field.
    * Can be used to trap user-initiated events such as button clicks, link navigation, and other actions that the user initiates explicitly or implicitly.

Advantages and disadvantages
The merits of using JavaScript are
    * Less server interaction 
    You can validate user input before sending the page off to the server. This saves server traffic, which means less load on your server.

    * Immediate feedback to the visitors
    They don't have to wait for a page reload to see if they have forgotten to enter something.

    * Increased interactivity
    You can create interfaces that react when the user hovers over them with a mouse or activates them via the keyboard.

    * Richer interfaces
    You can use JavaScript to include such items as drag-and-drop components and sliders to give a Rich Interface to your site visitors.

...and the disadvantages:
    * Client-side JavaScript does not allow the reading or writing of files.
    This has been kept for security reason.

    * JavaScript cannot be used for networking applications because there is no such support available.

    * JavaScript doesn't have any multithreading or multiprocessor capabilities.

Some basic features:
    * Uses <script> tag with two main attributes: language and type:
        <script language="javascript" type="text/javascript">
            JavaScript code
        </script>

    * Whitespace and Line Breaks
    They are ignored as in Java, C or C++.

    * Semicolons are Optional
    There are only mandatory if two statements in a line:
        var1 = 10; var2 = 20;

    * Case Sensitivity

    * Comments in JavaScript
    Three options are available: // for single line, /* */ for multi-line and <!-- for HTML comment.
    Be careful because --> is not interpreted as a comment, but you need to use //-->.
    For example,
        <script language="javascript" type="text/javascript">
            <!--

            // This is a comment. It is similar to comments in C++

            /*
             * This is a multiline comment in JavaScript
             * It is very similar to comments in C Programming
             */

            //-->
        </script>

Placement in HTML file
    Depending on the type of JavaScript contents, the code can be placed in the head, in the body, in both places or in an external file, inside an HTML document.

    * JavaScript in the head
    If you want to run a script on some event, e.g. when user clicks somewhere, place it
        <html>
            <head>
                <script type="text/javascript">
                    <!--
                        function sayHello() {
                        alert("Hello World")
                        }
                    //-->
                </script>
            </head>
            <body>
                <input type="button" onclick="sayHello()" value="Say Hello" />
            </body>
        </html>

    * JavaScript in the body
    If you need a script to run as the page loads so that the script generates content in the page, then the script goes in the <body> portion of the document.
        <html>
            <head>
            </head>
            <body>
                <script type="text/javascript">
                    <!--
                        document.write("Hello World")
                    //-->
                </script>
                <p>This is web page body </p>
            </body>
        </html>

    * JavaScript in <body> and <head> Sections
        <html>
	        <head>
	            <script type="text/javascript">
	                <!--
	                function sayHello() {
	                    alert("Hello World")
	                }
	                //-->
	            </script>
	        </head>
	        <body>
	            <script type="text/javascript">
	            <!--
	                document.write("Hello World")
	            //-->
	            </script>
	            <input type="button" onclick="sayHello()" value="Say Hello" />
	        </body>
	    </html>

    * JavaScript in an external file
        <html>
            <head>
                <script type="text/javascript" src="filename.js" ></script>
            </head>
            <body>
                .......
            </body>
        </html>

        <!-- File: filename.js -->
        function sayHello() {
            alert("Hello World")
        }

2. Datatypes, variables and operators
    2.1 Object-Oriented Programming
    2.2 The Number Object
    2.3 The Boolean Object
    2.4 The Strings Object
    2.5 The Arrays Object
    2.6 The Date Object
    2.7 The Math Object
    2.8 Regular Expressions

JavaScript allows you to work with three primitive data types,
    * Numbers (integer or float), eg. 123, 120.50 etc.
      JavaScript represents numbers using the 64-bit floating-point format defined by the IEEE 754 standard.
    * Strings of text e.g. "This text string" etc.
    * Boolean e.g. true or false.

two trivial datatypes,
    * null
    * undefined
and one composite data type,
    * object

JavaScript is an untyped language, there is no need to define the type of the variable, it can be dynamically re-assigned.

    <script type="text/javascript">
    <!--
        var money;
        var name;
        var head, body;
        var argent = 60000;
    //-->
    </script>

Scope of the variables:
 The scope of a variable is the region of your program in which it is defined.
    * Global Variables − A global variable has global scope which means it can be defined anywhere in your JavaScript code.
    * Local Variables − A local variable will be visible only within a function where it is defined. Function parameters are always local to that function.

 Rules naming the variables:
    * You should not use any of the JavaScript reserved keywords as a variable name.
    * JavaScript variable names should not start with a numeral (0-9). They must begin with a letter or an underscore character.
        For example, not 123test but yes _123test
    * JavaScript variable names are case-sensitive.

JavaScript Reserved Words
    types
        boolean byte char double enum float
        const true false long short int
        instanceof
    functions
        break case continue default do else
        try catch throw final finally for
        goto if in instanceof return this
        typeof var void switch function
        throws while with
    classes
        abstract class extends final implements
        interface new null private protected
        public super this with
    misc
        debugger delete export import native
        package static synchronized transient
        volatile

Operators:
    * Arithmetic Operators
    * Comparision Operators
    * Logical (or Relational) Operators
    * Assignment Operators
    * Conditional (or ternary) Operators

* Arithmetic Operators
    + (Addition)        Adds two operands
      (Concatenation)   Concatenates two operands
    - (Subtraction)     Subtracts the second operand from the first
    * (Multiplication)  Multiply both operands
    / (Division)        Divide the numerator by the denominator
    % (Modulus)         Outputs the remainder of an integer division
    ++ (Increment)      Increases an integer value by one
    -- (Decrement)      Decreases an integer value by one

* Comparision Operators
    == (Equal)          Checks if the value of two operands are equal or not
                        If yes, then the condition becomes true.
    === (Strict Equal)  

    != (Not Equal)      Checks if the value of two operands are equal or not.
                        If the values are not equal, then the condition becomes true.
    !== (Strict Not Equal)

    > (Greater than)    Checks if the value of the left operand is greater than the value of the right operand.
                        If yes, then the condition becomes true.

    >=                  Checks if the value of the left operand is greater than or equal to the value of the right operand, if yes, then the condition becomes true.

    < (Less than)       Checks if the value of the left operand is less than the value of the right operand, if yes, then the condition becomes true.

    <=                  Checks if the value of the left operand is less than or equal to the value of the right operand, if yes, then the condition becomes true.

* Logical Operators
    && (Logical AND)    If both the operands are non-zero, then the condition becomes true.

    || (Logical OR)     If any of the two operands are non-zero, then the condition becomes true.

    ! (Logical NOT)     Reverses the logical state of its operand. If a condition is true, then the Logical NOT operator will make it false.

* Bitwise Operators
    & (Bitwise AND)     It performs a Boolean AND operation on each bit of its integer arguments.

    | (BitWise OR)      It performs a Boolean OR operation on each bit of its integer arguments.

    ^ (Bitwise XOR)     It performs a Boolean exclusive OR operation on each bit of its integer arguments. Exclusive OR means that either operand one is true or operand two is true, but not both.

    ~ (Bitwise Not)     It is a unary operator and operates by reversing all the bits in the operand.

    << (Left Shift)     It moves all the bits in its first operand to the left by the number of places specified in the second operand.
                        New bits are filled with zeros. Shifting a value left by one position is equivalent to multiplying it by 2, shifting two positions is equivalent to multiplying by 4, and so on.

    >> (Right Shift)    Binary Right Shift Operator. The left operand’s value is moved right by the number of bits specified by the right operand.

    >>> (Right shift with Zero)     This operator is just like the >> operator, except that the bits shifted in on the left are always zero.

* Assignment Operators
    = (Simple Assignment)  Assigns values from the right side operand to the left side operand

    += (Add and Assignment) It adds the right operand to the left operand and assigns the result to the left operand.

    −= (Subtract and Assignment)    It subtracts the right operand from the left operand and assigns the result to the left operand.

    *= (Multiply and Assignment)    It multiplies the right operand with the left operand and assigns the result to the left operand.

    /= (Divide and Assignment)      It divides the left operand with the right operand and assigns the result to the left operand.

    %= (Modules and Assignment)     It takes modulus using two operands and assigns the result to the left operand.

Miscellaneous Operators
    ? : (Conditional )      If Condition is true? Then value X : Otherwise value Y

    typeof Operator         Number    "number"
                            String    "string"
                            Boolean   "boolean"
                            Object    "object"
                            Function  "function"
                            Undefined "undefined"
                            Null      "object"

2.1 Object-Oriented Programming
Javascript is an Object-Oriented Programming language:
    - Encapsulation
    - Aggregation
    - Inheritance
    - Polymorphism

2.1.1 Object Properties
The syntax for adding a property to an object is −
    objectName.objectProperty = propertyValue;

2.1.2 Object Methods
In Javascript, a method uses the 'function' keyword, but
    - A method uses the 'this' keyword.
    - A function not.

2.1.3 User-Defined Objects
All user-defined objects and built-in objects are descendants of an object called Object.

2.1.3.1 The new Operator
The new operator is used to create an instance of an object. To create an object, the new operator is followed by the constructor method.

Example:
    var employee = new Object();
    var books = new Array("C++", "Perl", "Java");
    var day = new Date("August 15, 1947");

2.1.3.2 The Object() and function() Constructor
A constructor is a function that creates and initializes an object.

Example: C02_objects_01_new_object.html 
        var book = new Object();   // Create the object
        book.subject = "Perl"; // Assign properties to the object
        book.author  = "Mohtashim";

Example: C02_objects_02_new_function.html
         function book(title, author){
            this.title = title; 
            this.author  = author;
         }
         var myBook = new book("Perl", "Mohtashim");

2.1.3.3 Defining Methods for an Object

Example: C02_objects_03_methods for an object.html
     // Define a function which will work as a method
     function addPrice(amount){
        this.price = amount; 
     }
     
     function book(title, author){
        this.title = title;
        this.author  = author;
        this.addPrice = addPrice; // Assign that method as property.
     }

2.1.4 The 'with' Keyword
The ‘with’ keyword is used as a kind of shorthand for referencing an object's properties or methods.

    with (object){
       properties used without the object name and dot
    }


Example: 
    function addPrice(amount){
       with(this){
          price = amount;
       }
    }

    function book(title, author){
       this.title = title;
       this.author = author;
       this.price = 0;
       this.addPrice = addPrice; // Assign that method as property.
    }

2.2 The Number Object
The Number object represents numerical date, either integers or floating-point numbers.

Syntax:
    var val = new Number(number);

In case of non-number argument, the number is converted into a NaN (Not-a-Number).

2.2.1 Number properties:
    - MAX_VALUE
    - MIN_VALUE
    - NaN
    - NEGATIVE_INFINITY
    - POSITIVE_INFINITY
    - prototype
    - constructor

2.2.2 Number methods:
    - toExponential()
    - toFixed()
    - toLocaleString()
    - toPrecision()
    - toString()
    - valueOf()

2.3 The Boolean Object
The Boolean object represents two values, either "true" or "false".

If value parameter is omitted or is 0, -0, null, false, NaN, undefined, or the empty string (""), the object has an initial value of false.

Syntax:
    var val = new Boolean(value);

Boolean Properties
    - constructor: Returns a reference to the Boolean function that created the object.
        Example: C02_boolean_01_constructor.html
    - prototype: The prototype property allows you to add properties and methods to an object.

Boolean Methods
    - toSource(): Returns a string containing the source of the Boolean object; you can use this string to create an equivalent object.
    - toString(): Returns a string of either "true" or "false" depending upon the value of the object.
    - valueOf(): Returns the primitive value of the Boolean object.

2.4 The Strings Object
The String object lets you work with a series of characters; it wraps Javascript's string primitive data type with a number of helper methods.

Syntax:
    var val = new String(string);

String Properties
    - constructor: Returns a reference to the String function that created the object.
    - length: Returns the length of the string.
    - prototype: The prototype property allows you to add properties and methods to an object.

String Methods
Here is a list of the methods available in String object along with their description.
    - charAt(): Returns the character at the specified index.
    - charCodeAt(): Returns a number indicating the Unicode value of the character at the given index.
    - concat(): Combines the text of two strings and returns a new string.
    - indexOf(): Returns the index within the calling String object of the first occurrence of the specified value, or -1 if not found.
    - lastIndexOf(): Returns the index within the calling String object of the last occurrence of the specified value, or -1 if not found
    - localeCompare(): Returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order.
    - match(): Used to match a regular expression against a string.
    - replace(): Used to find a match between a regular expression and a string, and to replace the matched substring with a new substring.
    - search(): Executes the search for a match between a regular expression and a specified string.
    - slice(): Extracts a section of a string and returns a new string.
    - split(): Splits a String object into an array of strings by separating the string into substrings.
    - substr(): Returns the characters in a string beginning at the specified location through the specified number of characters.
    - substring(): Returns the characters in a string between two indexes into the string.
    - toLocaleLowerCase(): The characters within a string are converted to lower case while respecting the current locale.
    - toLocaleUpperCase(): The characters within a string are converted to upper case while respecting the current locale.
    - toLowerCase(): Returns the calling string value converted to lower case.
    - toString(): Returns a string representing the specified object.
    - toUpperCase(): Returns the calling string value converted to uppercase.
    - valueOf(): Returns the primitive value of the specified object.

String HTML Wrappers
Here is a list of the methods that return a copy of the string wrapped inside an appropriate HTML tag.
    - anchor(): Creates an HTML anchor that is used as a hypertext target.
    - big: Creates a string to be displayed in a big font as if it were in a <big> tag.
    - blink(): Creates a string to blink as if it were in a <blink> tag.
    - bold(): Creates a string to be displayed as bold as if it were in a <b> tag.
    - fixed(): Causes a string to be displayed in fixed-pitch font as if it were in a <tt> tag.
    - fontcolor(): Causes a string to be displayed in the specified color as if it were in a <font color="color"> tag.
    - fontsize(): Causes a string to be displayed in the specified font size as if it were in a <font size="size"> tag.
    - italics(): Causes a string to be italic, as if it were in an <i> tag.
    - link(): Creates an HTML hypertext link that requests another URL.
    - small(): Causes a string to be displayed in a small font, as if it were in a <small> tag.
    - strike(): Causes a string to be displayed as struck-out text, as if it were in a <strike> tag.
    - sub(): Causes a string to be displayed as a subscript, as if it were in a <sub> tag.
    - sup(): Causes a string to be displayed as a superscript, as if it were in a <sup> tag.

2.5 The Arrays Object
The Array object lets you store multiple values in a single variable.
It stores a fixed-size sequential collection of elements of the same type.

Syntax:
    var fruits = new Array( "apple", "orange", "mango" );

Array Properties:
    - constructor: Returns a reference to the array function that created the object.
    - index: The property represents the zero-based index of the match in the string.
    - input: This property is only present in arrays created by regular expression matches.
    - length: Reflects the number of elements in an array.
    - prototype: The prototype property allows you to add properties and methods to an object.

Array Methods:
    - concat(): Returns a new array comprised of this array joined with other array(s) and/or value(s).
    - every(): Returns true if every element in this array satisfies the provided testing function.
    - filter(): Creates a new array with all of the elements of this array for which the provided filtering function returns true.
    - forEach(): Calls a function for each element in the array.
    - indexOf(): Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
    - join(): Joins all elements of an array into a string.
    - lastIndexOf(): Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
    - map(): Creates a new array with the results of calling a provided function on every element in this array.
    - pop(): Removes the last element from an array and returns that element.
    - push(): Adds one or more elements to the end of an array and returns the new length of the array.
    - reduce(): Apply a function simultaneously against two values of the array (from left-to-right) as to reduce it to a single value.
    - reduceRight(): Apply a function simultaneously against two values of the array (from right-to-left) as to reduce it to a single value.
    - reverse(): Reverses the order of the elements of an array -- the first becomes the last, and the last becomes the first.
    - shift(): Removes the first element from an array and returns that element.
    - slice(): Extracts a section of an array and returns a new array.
    - some(): Returns true if at least one element in this array satisfies the provided testing function.
    - toSource(): Represents the source code of an object.
    - sort(): Represents the source code of an object.
    - splice(): Adds and/or removes elements from an array.
    - toString(): Returns a string representing the array and its elements.
    - unshift(): Adds one or more elements to the front of an array and returns the new length of the array.

2.6 The Date Object
The Date object is a datatype built into the JavaScript language.
Date objects are created with the new Date( ) as shown below.

Syntax:
    new Date( )             // current date and time
    new Date(milliseconds)  // as returned by the getTime() method (from 1/1/1970 midnight)
    new Date(datestring)    // string as returned by the Date.parse() method.
    new Date(year, month, date[, hour, minute, second, millisecond ])   // integer values
        // year: 1998, etc.
        // month: 0 = January; 11 = December.
        // date: 1...31
        // hour: 24-hour scale

Date properties:
    - constructor: Specifies the function that creates an object's prototype.
    - prototype: The prototype property allows you to add properties and methods to an object.

Date Methods:
    - Date(): Returns today's date and time.
    - getDate(): Returns the day of the month for the specified date according to local time.
    - getDay(): Returns the day of the week for the specified date according to local time.
    - getFullYear(): Returns the year of the specified date according to local time.
    - getHours(): Returns the hour in the specified date according to local time.
    - getMilliseconds(): Returns the milliseconds in the specified date according to local time.
    - getMinutes(): Returns the minutes in the specified date according to local time.
    - getMonth(): Returns the month in the specified date according to local time.
    - getSeconds(): Returns the seconds in the specified date according to local time.
    - getTime(): Returns the numeric value of the specified date as the number of milliseconds since January 1, 1970, 00:00:00 UTC.
    - getTimezoneOffset()
    - getUTCDate()
    - getUTCDay()
    - getUTCFullYear()
    getUTCHours()
    getUTCMilliseconds()
    getUTCMinutes()
    getUTCMonth()
    getUTCSeconds()
    getYear()
    setDate()
    setFullYear()
    setHours()
    setMilliseconds()
    setMinutes()
    setMonth()
    setSeconds()
    setTime()
    setUTCDate()
    setUTCFullYear()
    setUTCHours()
    setUTCMilliseconds()
    setUTCMinutes()
    setUTCMonth()
    setUTCSeconds()
    setYear()
    toDateString()
    toGMTString()
    toLocaleDateString()
    toLocaleFormat()
    toLocaleString()
    toLocaleTimeString()
    toSource()
    toString()
    toTimeString()
    toUTCString()
    valueOf()


Date Static Methods:
These methods are invoked through the Date() constructor itself.
    - Date.parse(): Parses a string representation of a date and time and returns the internal millisecond representation of that date.
    - Date.UTC( ): Returns the millisecond representation of the specified UTC date and time.

2.7 The Math Object:
The math object provides you properties and methods for mathematical constants and functions.
Unlike other global objects, Math is not a constructor.
All the properties and methods of Math are static and can be called by using Math as an object without creating it.

Syntax:
    var pi_val = Math.PI;
    var sine_val = Math.sin(30);

Math Properties:
    - E \
    - LN2
    - LN10
    - LOG2E
    - LOG10E
    - PI
    - SQRT1_2
    - SQRT2

Math Methods:
    - abs()
abs()   Returns the absolute value of a number.
acos()  Returns the arccosine (in radians) of a number.
asin()  Returns the arcsine (in radians) of a number.
atan()  Returns the arctangent (in radians) of a number.
atan2() Returns the arctangent of the quotient of its arguments.
ceil()  Returns the smallest integer greater than or equal to a number.
cos()   Returns the cosine of a number.
exp()   Returns EN, where N is the argument, and E is Euler's constant, the base of the natural logarithm.
floor() Returns the largest integer less than or equal to a number.
log()   Returns the natural logarithm (base E) of a number.
max()   Returns the largest of zero or more numbers.
min()   Returns the smallest of zero or more numbers.
pow()   Returns base to the exponent power, that is, base exponent.
random()    Returns a pseudo-random number between 0 and 1.
round() Returns the value of a number rounded to the nearest integer.
sin()   Returns the sine of a number.
sqrt()  Returns the square root of a number.
tan()   Returns the tangent of a number.
toSource()  Returns the string "Math".

2.8 Regular Expressions:
The JavaScript RegExp class represents regular expressions, and both String and RegExp define methods that use regular expressions to perform powerful pattern-matching and search-and-replace functions on text.

Syntax:
    var pattern = new RegExp(pattern, attributes);
    var pattern = /pattern/attributes;

    - pattern − A string that specifies the pattern of the regular expression or another regular expression.
    - attributes − An optional string containing any of the "g", "i", and "m" attributes that specify global, case-insensitive, and multiline matches, respectively.

Brackets:
    Brackets ([]) have a special meaning when used in the context of regular expressions. They are used to find a range of characters.
    [...]   Any one character between the brackets.
    [^...]  Any one character not between the brackets.
    [0-9]   It matches any decimal digit from 0 through 9.
    [a-z]   It matches any character from lowercase a through lowercase z.
    [A-Z]   It matches any character from uppercase A through uppercase Z.
    [a-Z]   It matches any character from lowercase a through uppercase Z.

Quantifiers:
    p+  It matches any string containing at least one p.
    p*  It matches any string containing zero or more p's.
    p?  It matches any string containing one or more p's.
    p{N}    It matches any string containing a sequence of N p's
    p{2,3}  It matches any string containing a sequence of two or three p's.
    p{2, }  It matches any string containing a sequence of at least two p's.
    p$  It matches any string with p at the end of it.
    ^p  It matches any string with p at the beginning of it.

Examples:
    [^a-zA-Z]   It matches any string not containing any of the characters ranging from a through z and A through Z.
    p.p It matches any string containing p, followed by any character, in turn followed by another p.
    ^.{2}$  It matches any string containing exactly two characters.
    <b>(.*)</b> It matches any string enclosed within <b> and </b>.
    p(hp)*  It matches any string containing a p followed by zero or more instances of the sequence hp.

Literal characters

    Alphanumeric    Itself
    \0  The NUL character (\u0000)
    \t  Tab (\u0009)
    \n  Newline (\u000A)
    \v  Vertical tab (\u000B)
    \f  Form feed (\u000C)
    \r  Carriage return (\u000D)
    \xnn    The Latin character specified by the hexadecimal number nn; for example, \x0A is the same as \n
    \uxxxx  The Unicode character specified by the hexadecimal number xxxx; for example, \u0009 is the same as \t
    \cX The control character ^X; for example, \cJ is equivalent to the newline character \n

Metacharacters
    .   a single character
    \s  a whitespace character (space, tab, newline)
    \S  non-whitespace character
    \d  a digit (0-9)
    \D  a non-digit
    \w  a word character (a-z, A-Z, 0-9, _)
    \W  a non-word character
    [\b]    a literal backspace (special case).
    [aeiou] matches a single character in the given set
    [^aeiou]    matches a single character outside the given set
    (foo|bar|baz)   matches any of the alternatives specified

Modifiers
    i   Perform case-insensitive matching.
    m   Specifies that if the string has newline or carriage return characters, the ^ and $ operators will now match against a newline boundary, instead of a string boundary.
    g   Performs a global matchthat is, find all matches rather than stopping after the first match.

RegExp Properties
    constructor Specifies the function that creates an object's prototype.
    global  Specifies if the "g" modifier is set.
    ignoreCase  Specifies if the "i" modifier is set.
    lastIndex   The index at which to start the next match.
    multiline   Specifies if the "m" modifier is set.
    source  The text of the pattern.

RegExp Methods
    exec()  Executes a search for a match in its string parameter.
    test()  Tests for a match in its string parameter.
    toSource()  Returns an object literal representing the specified object; you can use this value to create a new object.
    toString()  Returns a string representing the specified object.

3. Control flow: if, switch, for, while, break, continue, labels

* if...else if... statement
    if (expression 1) {
        Statement(s) to be executed if expression 1 is true
    } else if (expression 2) {
        Statement(s) to be executed if expression 2 is true
    } else if (expression 3) {
        Statement(s) to be executed if expression 3 is true
    } else {
        Statement(s) to be executed if no expression is true
    }

* switch ... case
    switch (expression) {
        case condition 1:   statement(s)
                            break;

        case condition 2:   statement(s)
                            break;

        ...

        case condition n:   statement(s)
                            break;

        default: statement(s)
        }

    <html>
        <body>

        <script type="text/javascript">
            <!--
                var grade='A';
                document.write("Entering switch block<br />");
                switch (grade)
                {
                case 'A': document.write("Good job<br />");
                break;
                
                case 'B': document.write("Pretty good<br />");
                break;
                
                case 'C': document.write("Passed<br />");
                break;
                
                case 'D': document.write("Not so good<br />");
                break;
                
                case 'F': document.write("Failed<br />");
                break;
                
                default:  document.write("Unknown grade<br />")
                }
                document.write("Exiting switch block");
            //-->
        </script>
        
            <p>Set the variable to different value and then try...</p>
        </body>
    </html>

* while loop
    The syntax of while loop in JavaScript is as follows −
        while (expression){
            Statement(s) to be executed if expression is true
        }

    <html>
        <body>
            <script type="text/javascript">
                <!--
                    var count = 0;
                    document.write("Starting Loop ");
                
                    while (count < 10) {
                    	document.write("Current Count : " + count + "<br />");
                    	count++;
                    }
                
                    document.write("Loop stopped!");
                //-->
            </script>

            <p>Set the variable to different value and then try...</p>
        </body>
    </html>

* do-while
    The syntax for do-while loop in JavaScript is as follows −
        do{
            Statement(s) to be executed;
        } while (expression);

    <html>
        <body>
        
            <script type="text/javascript">
                <!--
                    var count = 0;
                    
                    document.write("Starting Loop" + "<br />");
                    do {
                    	document.write("Current Count : " + count + "<br />");
                    	count++;
                    } while (count < 5);
                    document.write ("Loop stopped!");
                //-->
            </script>
            
            <p>Set the variable to different value and then try...</p>
        </body>
    </html>

* for loop
The 'for' loop is the most compact form of looping. It includes the following three important parts −

    * The loop initialization where we initialize our counter to a starting value. The initialization statement is executed before the loop begins.

    * The test statement which will test if a given condition is true or not. If the condition is true, then the code given inside the loop will be executed, otherwise the control will come out of the loop.

    * The iteration statement where you can increase or decrease your counter.

    for (initialization; test condition; iteration statement){
        Statement(s) to be executed if test condition is true
    }

    <html>
        <body>

            <script type="text/javascript">
            <!--
                var count;
                document.write("Starting Loop" + "<br />");
            
                for (count = 0; count < 10; count++) {
                	document.write("Current Count : " + count );
                	document.write("<br />");
                }
            
                document.write("Loop stopped!");
            //-->
            </script>

            <p>Set the variable to different value and then try...</p>
        </body>
    </html>

* for...in loops
    The for...in loop is used to loop through an object's properties.

    for (variablename in object){
        statement or block to execute
    }

    <html>
        <body>

            <script type="text/javascript">
                <!--
                    var aProperty;
                    document.write("Navigator Object Properties<br /> ");
                
                    for (aProperty in navigator) {
                    	document.write(aProperty);
                    	document.write("<br />");
                    }
                    document.write ("Exiting from the loop!");
                //-->
            </script>

            <p>Set the variable to different object and then try...</p>
        </body>
    </html>

* Loop control: break, continue and labels

    break   The break statement, which was briefly introduced with the switch statement, is used to exit a loop early, breaking out of the enclosing curly braces.

    <html>
        <body>

            <script type="text/javascript">
                <!--
                var x = 1;
                document.write("Entering the loop<br /> ");
                
                while (x < 20)
                {
                    if (x == 5){
                    break; // breaks out of loop completely
                    }
                    x = x + 1;
                    document.write( x + "<br />");
                }
                
                document.write("Exiting the loop!<br /> ");
                //-->
            </script>

            <p>Set the variable to different value and then try...</p>
        </body>
    </html>

    continue    tells the interpreter to immediately start the next iteration of the loop and skip the remaining code block. When a continue statement is encountered, the program flow moves to the loop check expression immediately and if the condition remains true, then it starts the next iteration, otherwise the control comes out of the loop.

    labels
    Starting from JavaScript 1.2, a label can be used with break and continue to control the flow more precisely. A label is simply an identifier followed by a colon (:) that is applied to a statement or a block of code. We will see two different examples to understand how to use labels with break and continue.

    Note − Line breaks are not allowed between the ‘continue’ or ‘break’ statement and its label name. Also, there should not be any other statement in between a label name and associated loop.

    Try the following two examples for a better understanding of Labels.
    C01E03_label.js
    C01E04_label.js


4. Functions
A function is a group of reusable code which can be called anywhere in your program. This eliminates the need of writing the same code again and again. It helps programmers in writing modular codes.

<script type="text/javascript">
   <!--
      function functionname(parameter-list)
      {
         statements
      }
   //-->
</script>

Calling a Function
    <html>
        <head>

            <script type="text/javascript">
            function sayHello() {
                document.write ("Hello there!");
            }
            </script>

        </head>
        <body>
            <p>Click the following button to call the function</p>

            <form>
                <input type="button" onclick="sayHello()" value="Say Hello">
            </form>

            <p>Use different text in write method and then try...</p>
        </body>
    </html>

    C01E05_function.js

Nested Functions:   http://www.tutorialspoint.com/javascript/javascript_nested_functions.html
The Function() Constructor: http://www.tutorialspoint.com/javascript/javascript_function_constructors.html
Function Literals: http://www.tutorialspoint.com/javascript/javascript_function_literals.htm


5. Events
JavaScript's interaction with HTML is handled through events that occur when the user or the browser manipulates a page.

Events are a part of the Document Object Model (DOM) Level 3 and every HTML element contains a set of events which can trigger JavaScript Code.

HTML Events references: http://www.tutorialspoint.com/html/html_events_ref.htm

onclick Event Type
    This is the most frequently used event type which occurs when a user clicks the left button of his mouse. You can put your validation, warning etc., against this event type.

    C05_E01_events_onclick.js

onsubmit Event type
    onsubmit is an event that occurs when you try to submit a form.
    You can put your form validation against this event type.

    C05_E02_events_onsubmit.js

onmouseover and onmouseout
    These two event types will help you create nice effects with images or even with text as well.
    The onmouseover event triggers when you bring your mouse over any element.
    The onmouseout triggers when you move your mouse out from that element.

    C05_E03_events_onmouse.js

Reference: "HTML5 standard events.txt"


6. Cookies
Web Browsers and Servers use HTTP protocol to communicate and HTTP is a stateless protocol.
But for a commercial website, it is required to maintain session information among different pages.
For example, one user registration ends after completing many pages.
But how to maintain users' session information across all the web pages.

How does it work?
Your server sends some data to the visitor's browser in the form of a cookie. The browser may accept the cookie. If it does, it is stored as a plain text record on the visitor's hard drive. Now, when the visitor arrives at another page on your site, the browser sends the same cookie to the server for retrieval. Once retrieved, your server knows/remembers what was stored earlier.

Cookies are a plain text data record of 5 variable-length fields −

    * Expires − The date the cookie will expire. If this is blank, the cookie will expire when the visitor quits the browser.

    * Domain − The domain name of your site.

    * Path − The path to the directory or web page that set the cookie. This may be blank if you want to retrieve the cookie from any directory or page.

    * Secure − If this field contains the word "secure", then the cookie may only be retrieved with a secure server. If this field is blank, no such restriction exists.

    * Name=Value − Cookies are set and retrieved in the form of key-value pairs

JavaScript can also manipulate cookies using the cookie property of the Document object. JavaScript can read, create, modify, and delete the cookies that apply to the current web page.

6.1 Storing Cookies
The simplest way to create a cookie is to assign a string value to the document.cookie object, which looks like this:
	document.cookie = "key1=value1;key2=value2;expires=date";

Here the 'expires' attribute is optional. If you provide this attribute with a valid date or time, then the cookie will expire on a given date or time and thereafter, the cookies' value will not be accessible.

Note − Cookie values may not include semicolons, commas, or whitespace. For this reason, you may want to use the JavaScript escape() function to encode the value before storing it in the cookie. If you do this, you will also have to use the corresponding unescape() function when you read the cookie value.
	Ej: C06_E01_wr_cookies.html

6.2 Reading Cookies
Reading a cookie is just as simple as writing one, because the value of the document.cookie object is the cookie. So you can use this string whenever you want to access the cookie. The document.cookie string will keep a list of name=value pairs separated by semicolons, where name is the name of a cookie and value is its string value.
	Ej: C06_E02_rd_cookies.html

6.3 Setting expiry date
You can extend the life of a cookie beyond the current browser session by setting an expiration date and saving the expiry date within the cookie. This can be done by setting the ‘expires’ attribute to a date and time.

6.4 Deleting a Cookie
Sometimes you will want to delete a cookie so that subsequent attempts to read the cookie return nothing. To do this, you just need to set the expiry date to a time in the past.


7. Page redirections, Dialog boxes, page refresh

7.1 Page redirection
Javascript permits to make client-side page redirection.

Reasons for redirecting:
 - domain renaming.
 - browser versioning.

Ej1: redirection by button: 			C07_E01_redirection_01.html
Ej2: redirection by timeout: 			C07_E02_redirection_02.html
Ej3: redirection by navigator client: 	C07_E03_redirection_03.html

7.2 Dialog boxes
JavaScript supports three important types of dialog boxes.
    - Alert Dialog boxes
    - Confirmation Dialog boxes
    - Prompt Dialog boxes

7.2.1 Alert Dialog boxes
An alert dialog box is mostly used to give a warning message to the users.
Example: C07_E04_dialog_alert.html

7.1.2 Confirmation Dialog boxes
A confirmation dialog box is mostly used to take user's consent on any option.

For the javascript confirm function:
  - If the user clicks on the OK button, the window method confirm() will return true. 
  - If the user clicks on the Cancel button, then confirm() returns false.
Example: C07_E05_dialog_confirmation.html

7.1.3 Prompt Dialog boxes
The prompt dialog box is very useful when you want to pop-up a text box to get user input.

Javascript 'prompt()' function uses two parameters:
    (i)  a label which you want to display in the text box
    (ii) a default string to display in the text box.

The user has two options:
    - OK: the window method prompt() will return the entered value from the text box.
    - Cancel: the window method prompt() returns null.
Example: C07_E6_dialog_prompt.html

8. DOM.
Every web page resides inside a browser window which can be considered as an object.

A Document object represents the HTML document that is displayed in that window.
The Document object has various properties that refer to other objects which allow access to and modification of document content.
The Objects are organized in a hierarchy.
	- Window object
		Top of the hierarchy. It is the outmost element of the object hierarchy.
 	- Document object
 		Each HTML document that gets loaded into a window becomes a document object. The document contains the contents of the page.
 	- Form object
 		Everything enclosed in the <form>...</form> tags sets the form object.
 	- Form control elements
 		The form object contains all the elements defined for that object such as text fields, buttons, radio buttons, and checkboxes.

Link: http://www.w3schools.com/jsref/obj_window.asp

9. Exceptions
The try...catch...finally Statement
The latest versions of JavaScript added exception handling capabilities.

    <script type="text/javascript">
       <!--
          try {
             // Code to run
             [break;]
          } catch ( e ) {
             // Code to run if an exception occurs
             [break;]
          } [ finally {
             // Code that is always executed regardless of 
             // an exception occurring
          }]
       //-->
    </script>

The throw Statement
You can use throw statement to raise your built-in exceptions or your customized exceptions.
	function myFunc() {		
       var a = 100;
       var b = 0;
       
       try {
          if ( b == 0 ) {
             throw( "Divide by zero error." ); 
          } else {
             var c = a / b;
          }
       } catch ( e ) {
          alert("Error: " + e );
       }
    }

The onerror() Method
The error event is fired on the window object whenever an exception occurs on the page.

The onerror event handler provides three pieces of information to identify the exact nature of the error −
    - Error message 
    	The same message that the browser would display for the given error
    - URL 
    	The file in which the error occurred
    - Line number
    	The line number in the given URL that caused the error

You can use an onerror method, as shown below, to display an error message in case there is any problem in loading an image.

	Ej: <img src="myimage.gif" onerror="alert('An error occurred loading the image.')" />

You can use onerror with many HTML tags to display appropriate messages in case of errors.

10. Form Validation
JavaScript provides a way to validate form's data on the client's computer before sending it to the web server. Form validation generally performs two functions.
	- Basic Validation
    - Data Format Validation

10.1 Basic Form Validation
First let us see how to do a basic form validation.
There is a 'validate' Javascript validation function in the HTML script.
Ej: C10_E01_basic_valid.html

10.2 Data Format Validation
Now we will see how we can validate our entered form data before submitting it to the web server.
Ej: C10_E02_email_valid.html

11. Animation
You can use JavaScript to create a complex animation having, but not limited to, the following elements:
	- Fireworks
	- Fade Effect
	- Roll-in or Roll-out
	- Page-in or Page-out
	- Object movements

Examples: http://www.tutorialspoint.com/script.aculo.us/scriptaculous_effects.htm

JavaScript can be used to move a number of DOM elements (<img />, <div> or any other HTML element) around the page according to some sort of pattern determined by a logical equation or function.

JavaScript provides the following two functions to be frequently used in animation programs.
	- setTimeout(function, duration) 
		This function calls function after duration milliseconds from now.
	- setInterval(function, duration) 
		This function calls function after every duration milliseconds.
	- clearTimeout(setTimeout_variable) 
		This function calls clears any timer set by the setTimeout() functions.

JavaScript can also set a number of attributes of a DOM object including its position on the screen.
	- // Set distance from left edge of the screen.
		object.style.left = distance in pixels or points;
	- // Set distance from top edge of the screen.
		object.style.top = distance in pixels or points;

Examples:
	- Manual Animation
    	Ej: C11_E01_moveright.html
    - Automated Animation
    	Ej: C11_E02_automated.html
    - Rollover with a Mouse Event
    	Ej: C12_E03_rollover_mouse.html

12. Multimedia
The JavaScript 'navigator' object includes a child object called 'plugins'.

Each plugin has the following properties:
    - name
    - filename
    - description
    - mimeTypes

C12_E01_check_plugins.html
C12_E02_mimetypes.html
C12_E03_demoplay.html


13. Javascript Debugging
Best tips for developers:
    - Comments: especially for especially difficult sections.
    - Indentation: follow the HTML tag structure
    - Modular code.
    - Conceptuality in variables and functions.
    - Test, test, test.


14. Image Map
You can use JavaScript to create client-side image map.
Client-side image maps are enabled by the 'usemap' attribute for the <img /> tag and defined by special <map> and <area> extension tags.

The image that is going to form the map is inserted into the page using the <img /> element as normal, except that it carries an extra attribute called 'usemap'. The value of the 'usemap' attribute is the value of the 'name' attribute on the <map> element, which you are about to meet, preceded by a pound $ or hash # sign.

The <map> element actually creates the map for the image and usually follows directly after the <img /> element. It acts as a container for the <area /> elements that actually define the clickable hotspots. The <map> element carries only one attribute, the 'name attribute, which is the name that identifies the map. This is how the <img /> element knows which <map> element to use.

Example: C14_browsers.html


15. Browsers Compatibility
It is important to understand the differences between different browsers in order to handle each in the way it is expected.
So it is important to know which browser your web page is running in.

Those properties and methods are related to 'navigator'.
Properties
appCodeName "Netscape" or "Microsoft Internet Explorer".
appVersion  Version of the browser, language, compatibility.
language    Netscape only.
mimTypes[]  All MIME types supported the client.
platform[]  "Win32", etc.
plugins[]   Netscape only, all the plugins installed.
userAgent[] Codename and version of the client.

Navigator Methods
 - javaEnabled() If JS is enabled, returns true; false otherwise.
 - plugings.refresh newly installed plug-ins available and populates the plugins array with all new plug-in names.
 - preference(name,value) This method allows a signed script to get and set some Netscape preferences. If the second parameter is omitted, this method will return the value of the specified preference; otherwise, it sets the value.
 - taintEnabled() This method returns true if data tainting is enabled; false otherwise.

Example: C15_browsers.html

8. Void keyword

9. Page Printing
JavaScript helps you to implement page printing using the print function of window object.

http://www.tutorialspoint.com/javascript/javascript_page_printing.htm
