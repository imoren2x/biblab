AJAX Tutorial
-------------

ToC:
---
 1. Intro
 2. AJAX Actions (Not very good example)
 3. AJAX XMLHttpRequest
 4. AJAX Database operations
 

__________

Chapter 1. Intro
AJAX is a web development technique for creating interactive web applications.

AJAX = 'Asynchronous JavaScript and XML'

It permits the client to communicate with the server asynchronously from the point of view of the final user.

AJAX cannot work independently.
It is used in combination with other technologies to create interactive webpages:

JavaScript
    * Loosely typed scripting language.
    * JavaScript function is called when an event occurs in a page.
    * Glue for the whole AJAX operation.

DOM
    * API for accessing and manipulating structured documents.
    * Represents the structure of XML and HTML documents.

CSS
    * Allows for a clear separation of the presentation style from the content and may be changed programmatically by JavaScript.

XMLHttpRequest
    * JavaScript object that performs asynchronous interaction with the server

Steps of AJAX Operation
    1. A client event occurs.
    2. An XMLHttpRequest object is created.
    3. The XMLHttpRequest object is configured.
    4. The XMLHttpRequest object makes an asynchronous request to the Webserver.
    5. The Webserver returns the result containing XML document.
    6. The XMLHttpRequest object calls the callback() function and processes the result.
    7. The HTML DOM is updated.


Chapter 3. AJAX XMLHttpRequest

XMLHttpRequest Methods
    * abort()
        Cancels the current request.

    * getAllResponseHeaders()
        Returns the complete set of HTTP headers as a string.

    * getResponseHeader( headerName )
        Returns the value of the specified HTTP header.

    * open( method, URL )
      open( method, URL, async )
      open( method, URL, async, userName )
      open( method, URL, async, userName, password )
      Specifies the method, URL, and other optional attributes of a request.

      The method parameter can have a value of "GET", "POST", or "HEAD". Other HTTP methods, such as "PUT" and "DELETE" (primarily used in REST applications) may be possible.

      The "async" parameter specifies whether the request should be handled asynchronously or not. "true" means that the script processing carries on after the send() method without waiting for a response, and "false" means that the script waits for a response before continuing script processing.

    * send( content )
        Sends the request.

    * setRequestHeader( label, value )
        Adds a label/value pair to the HTTP header to be sent.

XMLHttpRequest Properties

    * onreadystatechange
        An event handler for an event that fires at every state change.

    * readyState
        The readyState property defines the current state of the XMLHttpRequest object.

        The following table provides a list of the possible values for the readyState property:
        
        State	Description
        0	The request is not initialized.
            After you have created the XMLHttpRequest object, but before you have called the open() method.

        1	The request has been set up.
            After you have called the open() method, but before you have called send().

        2	The request has been sent.
            After you have called send().

        3	The request is in process.
            After the browser has established a communication with the server, but before the server has completed the response.

        4	The request is completed.
            After the request has been completed, and the response data has been completely received from the server.

    * responseText
        Returns the response as a string.

    * responseXML
        Returns the response as XML. This property returns an XML document object, which can be examined and parsed using the W3C DOM node tree methods and properties.

    * status
        Returns the status as a number (e.g., 404 for "Not Found" and 200 for "OK").

    * statusText
        Returns the status as a string (e.g., "Not Found" or "OK").


Chapter 4. AJAX Database operations

    We are going to build MySQL queries on the fly and display the results on "ajax.html".

Previous database operations:
    CREATE TABLE 'ajax_example' (
       'name' varchar(50) NOT NULL,
       'age' int(11) NOT NULL,
       'sex' varchar(1) NOT NULL,
       'wpm' int(11) NOT NULL,
       PRIMARY KEY  ('name')
    )

    INSERT INTO 'ajax_example' VALUES ('Jerry', 120, 'm', 20);
    INSERT INTO 'ajax_example' VALUES ('Regis', 75, 'm', 44);
    INSERT INTO 'ajax_example' VALUES ('Frank', 45, 'm', 87);
    INSERT INTO 'ajax_example' VALUES ('Jill', 22, 'f', 72);
    INSERT INTO 'ajax_example' VALUES ('Tracy', 27, 'f', 0);
    INSERT INTO 'ajax_example' VALUES ('Julie', 35, 'f', 90);

