C++ Summarized
======

Part I. Basic skills
  1 General Structure
  2 Data types and variables
  3 Operators, expressions, comments, includes
  4 Flow control, functions
  5 Input and Output, files
  6 Namespaces and packages
  7 Standard library

Part II. Object-Oriented Programming
  1 Class, struct, union
    1.1 public, private and protected
	1.2 Constructor
	  1.2.1 Default and non-parametered
	  1.2.2 Parametered and overloaded
	  1.2.3 Copy Constructor
	1.3 Destructor
	1.4 'this' pointer and object.
	1.5 Static members
	1.6 Operators: overloading
	1.7 Friendship
	1.8 Pointer to classes
  2 Inheritance and overriding.
    2.1 Inheritance: public, private
	  2.1.1 Constructor
	  2.1.2 Destructor
	  2.1.3 Operators
	  2.1.4 Friend functions
	  2.1.5 Multiple inheritance
    2.2 Overriding
  3 Virtual functions and Polymorphism
    3.1 Virtual functions and inheritance
		Virtual member 	(base)
		+ inheritance 	(derived)
		+ pointers 		(client)
	3.2 Abstract base class (virtual = 0)
	3.3 Interface
	3.4 Applications

Part III. Intermediate skills
  4 Templates
    4.1 Function templates
	4.2 Class templates
	4.3 Template specification
	4.4 Non-type parameters for templates
	4.5 Templates < multiple-file projects
  5 Exceptions
	5.1 Exception specification (try, catch, throw)
	5.2 Definition of new exceptions
	5.3 catching or throwing my own exceptions
  6 Preprocessor directives
	Macro definitions: #define, #undef
	Conditional inclusions:
		#ifdef		#if		#else
		#ifndef		#endif	#elif
	Line control: #line
	Error directive: #error
	Source file: #include
	Pragma: #pragma
	Predefined  macro names
	pag. 155 y sigs.
Part III. Advanced skills
  7 Type casting
	Implicit conversion
	Explicit conversion
	dynamic_cast
	static_cast
	typeid and RTTI
	reinterpret_cast
	const_cast
  8 C++ Misc libraries:
	limits		new
	typeinfo	exception
	string		stdexcept
	utility		functional
	memory		locale
  9 C++ STL:
	Containers library
		bitset		queue
		deque		priority-queue
		list		set
		map			stack
		multimap	vector
		multiset
	Interators library
		iterator
	Algorithms library
		STL algorithms
	Numeric library
		complex
		valarray
		numeric
Part IV. Application
 10 Pattern Designs
   10.1 Singleton
   10.2 Factory
   10.3 Observer
 11 Process (forks) and threads
 12 Communications: sockets
Testing
Deploying
Data structures: XML, JSON,
---------------------------------------------
Analysis: UML
Dev: Qt, Eclipse, Visual Studio
Test/debug: Qtest, DDD, gdb
Release/deploy: package generator
Style guide: hungarian, Camel case, leszynski notation
Design pattern: singleton, factory, observer
Datarepresentation: ASN.1, XML/JSON/YAML
Communications: sockets
Process/threads
Documentation: doxygen
Doc/test/deploy
___________________________________________
Part I. Basic skills
  1 General Structure
  2 Data types and variables
  3 Operators, expressions, includes
  4 Flow control, functions.
  5 Input and Output, files
    open a file/Close a file
	Text files
	Checking state flags: good(), bad(), fail(), eof()
	Get/put stream pointers
	tellg(), tellp()
	seekg(), seekp()
	Binary files
  6 Namespaces and packages
  7 Standard library

Chapter 1. C++ General Structure
  First program in C++:
	#include <iostream>
	#include <cstdlib>
	using namespace std;

	int myfunction();

	int main() {
		printf("Hello, World!");
		return 0;//return myfunction();
	}

	int myfunction {
	 return 0;
	}

Chapter 2. Data types and variables
	2.1 Basic data types
	2.2 Constants
	2.3 ASCII codes
	2.4 Casting de tipos
	2.5 Arrays
	2.6 structs
	2.7 Pointer data types

2.1 Basic data types
Numbers: int, long, float, double
Characters: char, string
Boolean: bool
Others: enum, void
Modificators: const, signed, unsigned, long, short

int & long
float & double
char & string (faltan los string, con operaciones básicas)
bool, true/false
enum
void
Modificadores: signed, unsigned, long, short
	[signed|unsigned] char <id>
	long double
	[signed|unsigned] [short|long|long long] int <id>
	[signed|unsigned] long long [int] <id>
	[signed|unsigned] long [int] <id>
	[signed|unsigned] short [int] <id>
sizeof()
2.2 Constants
	Decimal, octal and hexadecimal
	 0 0x
	Long y long long (L LL)
	Unsigned, unsigned long y unsigned long long
	Float: f
	Double: (punto)
2.3 ASCII codes
	\n
	\t
	\\
	\'
	\"
	\?
2.4 Casting de tipos
	(<tipos>)
2.5 Arrays
	Definition: int vector[10];
	Initialization:
		char cadena[] = "helllooo";
		char Saludo[] = {'H', 'o', 'l', 'a', 0};
2.6 structs
Definition:
	struct Persona {
		char Nombre[65];
		char Direccion[65];
		int AnyoNacimiento;
	} Fulanito;
	struct Persona Menganito;//?

	struct A {
		int i;
		int j;
		int k;
	};
	struct B {
		int x;
		struct C {
			char c;
			char d;
		} y;
		int z;
	};

Initialization:
	A ejemploA = {10, 20, 30};
	B ejemploB = {10, {'a', 'b'}, 20};

Assignment: .
	=

Mapas de bits
	struct mapaBits {
		unsigned char bit0:1;
		unsigned char bit1:1;
		unsigned char bit2:1;
		unsigned char bit3:1;
		unsigned char bit4:1;
		unsigned char bit5:1;
		unsigned char bit6:1;
		unsigned char bit7:1;
		};
		struct mapaBits2 {
		unsigned short int campo1:3;
		unsigned short int campo2:4;
		unsigned short int campo3:2;
		unsigned short int campo4:1;
		unsigned short int campo5:6;
		};
		struct mapaBits3 {
		unsigned char campo1:5;
		unsigned char campo2:5;
	};

2.7 Pointer data types
Declaration:
	<tipo> *<identificador>;
Addressing and referencing
	int A;
	int *pA;
	pA = &A;
	pA = NULL;

Arrays and pointers
	int vector[10];
	int *puntero;
	puntero = vector; /* Equivale a puntero = &vector[0];
	esto se lee como "dirección del primer de vector" */
	*puntero++; /* Equivale a vector[0]++; */
	puntero++; /* puntero equivale a &vector[1] */

Comparing pointers:
	if(NULL != p) is equivalent to if(p)
	if(NULL == p) is equivalent to if(!p)

Pointers to structs
	->
Difference between pointer and structs
Existe una equivalencia casi total entre arrays y punteros. Cuando declaramos un array estamos haciendo varias cosas a la vez:
l Declaramos un puntero del mismo tipo que los elementos del array, y que apunta al primer elemento del array.
l Reservamos memoria para todos los elementos del array. Los elementos de un array se almacenan internamente en el ordenador en posiciones consecutivas de la memoria.
La principal diferencia entre un array y un puntero es que el nombre de un array es un puntero constante, no podemos hacer que apunte a otra dirección de memoria. Además, el compilador asocia una zona de memoria para los elementos del array, cosa que no hace para los elementos apuntados por un puntero auténtico.

Dynamic Memory
Parts of a program: local memory, the stack, heap

New and delete
	int *a;
	a = new int[1];
	int * b = new int[2];
	float **f = new float *[10];

	delete a;
	delete b[];

Punteros como parametros

Punteros como parametros de funciones
Puntero por referencia
void funcion(int* &q);

2.8 Unions
union [<tipo unión>] {
	[<tipo> <nombre de variable>[, <nombre variable>, ...]] ;
	} [<variable de unión>[,<variable union>...]] ;
Las uniones son un tipo especial de estructuras que permiten almacenar elementos de diferentes tipos en las mismas posiciones de memoria, aunque evidentemente no simultáneamente.

2.9 typedef
typedef <tipo> <identificador>;
typedef unsigned int UINT;
typedef int (*PFI)();
PFI f;

3 Operators, expressions, preprocessor directives
3.1 Operators
Bitwise operators
<expresión> & <expresión>
<expresión> ^ <expresión>
<expresión> | <expresión>
~<expresión>
<expresión> << <expresión>
<expresión> >> <expresión>

Conditional operator
<expresión lógica> ? <expresión> : <expresión>

3.3 Preprocessor directives
#include <nombre de fichero cabecera>
#include "nombre de fichero de cabecera"
#include id_de_define

#define FICHERO "trabajo.h"

4 Flow control, functions

4.2.1 Value and reference
Referencias a variables
Pasando parametros por referencia
 <tipo> &<alias> = <variable de referencia>
 <tipo> &<alias>

es ilegal pasar constantes como parámetros cuando
estos son referencias

Array como parametro de function
void funcion(int tabla[][M]);
// recuerda que el nombre de los parámetros en los
// prototipos es opcional, la forma:
// void funcion(int [][M]);
// es válida también.

structs como parametros de funciones

Funciones que devuelven referencias:
<tipo> &<identificador_función>(<lista_parámetros>);

4.2.2 Funciones con numero variable de argumentos
pag. 137 y sigs.
int funcion2(int a, float b, ...);

4.2.3 Argumentos en el main (desde la linea de comandos)
int main(int argc, char *argv[]);
int main(int argc, char **argv);

4.2.4 Punteros a funciones
pag 143 y sigs.

4.2.5 function overloading

4.2.6 Operator overloading
<tipo> operator <operador> (<argumentos>)
{
<sentencias>;
}
Limitaciones:
	* Se pueden sobrecargar todos los operadores excepto ".", ".*", "::" y "?:".
	* Los operadores "=", "[]", "->", "()", "new" y "delete", sólo pueden ser sobrecargados cuando se definen como miembros de una clase.
	* Los argumentos deben ser tipos enumerados o estructurados: struct, union o class.

pag 153. complejo operator +(complejo a, complejo b);

4.3 Storage types
auto
pag. 164

6 Namespaces
